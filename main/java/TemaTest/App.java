/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import java.io.*;
import java.util.Scanner;


class user
{
    String username;
    String password;
    public user() {}
    public user(String username, String password)
    {
        this.username = username;
        this.password = password;
    }
    public user verif_login(String[] args) {
        if(args.length == 1)
        {
            System.out.print("{'status':'error','message':'You need to be authenticated'}");
            return null;
        }
        else if(args.length == 2)
        {
            System.out.print("{'status':'error','message':'You need to be authenticated'}");
            return null;
        }

        String[] argument= args[1].split(" ");
        String u1 = argument[0];
        if(!u1.equals("-u"))
        {
            System.out.print("{'status':'error','message':'You need to be authenticated'}");
            return null;
        }
        else
        {
            try {
                File file = new File("./src/main/java/TemaTest/users.csv");
                Scanner reader = new Scanner(file);
                if(!reader.hasNextLine())
                {
                    System.out.print("{'status':'error','message':'Login failed'}");
                    reader.close();
                    return null;
                }
                reader.close();
            }
            catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
        String[] argument2=args[2].split(" ");
        if(!argument2[0].equals("-p"))
        {
            System.out.print("{'status':'error','message':'You need to be authenticated'}");
            return null;
        }
        else {
            try {
                File file = new File("./src/main/java/TemaTest/users.csv");
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    String data = reader.nextLine();
                    String[] d = data.split(",");
                    if (d[0].equals(argument[1])) {
                        if (!d[1].equals(argument2[1])) {
                            System.out.print("{'status':'error','message':'Login failed'}");
                            reader.close();
                            return null;
                        }
                    }
                }
                reader.close();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
        return new user(argument[1],argument2[1]);
    }

    public void most_liked_users(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);

        if (user == null) {
            return;
        }
    }
}

class post {
    public post() {
    }

    public void createpost(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if(args.length == 3)
        {
            System.out.print("{'status':'error','message':'No text provided'}");
            return;
        }else if(args.length >2) {
            String arg_text = args[3];
            if (arg_text.length() > 300) {
                System.out.print("{'status':'error','message':'Post text length exceeded'}");
                return;
            }
            String[] text = arg_text.split(" ");
            int id = 1;
            if (text[0].equals("-text")) {
                try (FileWriter myWriter = new FileWriter("./src/main/java/TemaTest/posts.csv", true)) {
                    for (int i = 1; i < text.length; i++) {
                        myWriter.write(text[i] + " ");
                    }
                    myWriter.write(",");
                    myWriter.write((Integer.toString(id)));
                    myWriter.write("\n");
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            } else {
                System.out.print("{'status':'error','message':'No text provided'}");
                return;
            }
            System.out.print("{'status':'ok','message':'Post added successfully'}");
        }
    }

    public void deletepost(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {return;}
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No identifier was provided'}");
            return;}
        String[] arg3 = args[3].split(" ");
        if (arg3[0].equals("-id")) {
            try {
                File file = new File("./src/main/java/TemaTest/posts.csv");
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    String data = reader.nextLine();
                    String[] d = data.split(",");
                    String[] id = arg3[1].split("'");
                    if (d[1].equals(id[1])) {

                        File inputFile = new File("./src/main/java/TemaTest/posts.csv");
                        File tempFile = new File("./src/main/java/TemaTest/posts.csv");
                        BufferedReader reader1 = new BufferedReader(new FileReader(inputFile));
                        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

                        String currentLine;
                        while ((currentLine = reader1.readLine()) != null) {
                            String trimmedLine = currentLine.trim();
                            if (trimmedLine.equals(data)) continue;
                            writer.write(currentLine + System.getProperty("line.separator"));
                        }
                        writer.close();
                        reader1.close();
                        System.out.print("{'status':'ok','message':'Post deleted successfully'}");
                        reader.close();
                        return;
                    }
                }
                System.out.print("{'status':'error','message':'The identifier was not valid'}");
                reader.close();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
    }

    public void like_post(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No post identifier to like was provided'}");
            return;
        }else if (args.length > 2) {
            String[] argid = args[3].split(" ");
            int likes = 0;
            int ok = 0; //verifica daca postarea a fost apreciata
            if (argid[0].equals("-post-id")) {
                try {
                    File file = new File("./src/main/java/TemaTest/posts.csv");
                    Scanner reader = new Scanner(file);
                    while (reader.hasNextLine()) {
                        String data = reader.nextLine();
                        String[] d = data.split(",");
                        String[] id = argid[1].split("");
                        if (d[1].equals(id[1])) {
                            /*try (FileWriter myWriter = new FileWriter("./src/main/java/TemaTest/posts.csv", true)) {
                                //for (int i = 1; i < argid.length; i++) {
                                //    myWriter.write(argid[i] + " ");
                                //}
                                myWriter.write(",");
                                myWriter.write((Integer.toString(++likes)));
                                myWriter.write("\n");
                            } catch (IOException e) {
                                System.out.println("An error occurred.");
                                e.printStackTrace();
                            }*/
                            likes++;
                            ok = 1;
                            System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                            reader.close();
                            return;
                        } else {
                            System.out.print("{'status':'error','message':'The post identifier to like was not valid'}");
                            reader.close();
                            return;
                        }
                    }
                    System.out.print("{'status':'error','message':'The post identifier to like was not valid'}");
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }

        }
    }

    public void unlike_post(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No post identifier to unlike was provided'}");
            return;
        }else if (args.length > 2) {
            String[] argid = args[3].split(" ");
            int likes = 0;
            if (argid[0].equals("-post-id")) {
                try {
                    File file = new File("./src/main/java/TemaTest/posts.csv");
                    Scanner reader = new Scanner(file);
                    while (reader.hasNextLine()) {
                        String data = reader.nextLine();
                        String[] d = data.split(",");
                        String[] id = argid[1].split("");
                        if (d[1].equals(id[1])) {
                            likes--;
                            System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                            reader.close();
                            return;
                        } else {
                            System.out.print("{'status':'error','message':'The post identifier to unlike was not valid'}");
                            reader.close();
                            return;
                        }
                    }
                    System.out.print("{'status':'error','message':'The post identifier to unlike was not valid'}");
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }
        }
    }

    public void lista_postari_follow(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if(user == null)
        {
            return;
        }
    }

    public void lista_postari_user(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
    }

    public void details_post(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
    }

    public void most_liked_posts(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);

        if (user == null) {
            return;
        }
    }

    public void most_commented_posts(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);

        if (user == null) {
            return;
        }
    }
}

class follow {
    public follow() {}
    public void follow_user(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No username to follow was provided'}");
            return;
        } else if (args.length > 2) {
            String[] argument = args[3].split(" ");
            String argument1 = argument[0];
            String username = argument[1];
            if (argument1.equals("-username")) {
                try (FileWriter myWriter = new FileWriter("./src/main/java/TemaTest/followuser.csv", true)) {
                    for (int i = 1; i < argument.length; i++) {
                        myWriter.write(argument[i] + " ");
                    }
                    myWriter.write(",");
                    myWriter.write("\n");
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
                try {
                    File file = new File("./src/main/java/TemaTest/followuser.csv");
                    Scanner reader = new Scanner(file);
                    while (reader.hasNextLine()) {
                        String data = reader.nextLine();
                        String[] d = data.split(" ");
                        if (d[0].equals(username)) {
                            System.out.print("{'status':'error','message':'The username to follow was not valid'}");
                            reader.close();
                            return;
                        }
                    }
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }else {
                System.out.print("{'status':'error','message':'No username to follow was provided'}");
                return;
            }
            System.out.print("{'status':'ok','message':'Operation executed successfully'}");
        }
    }

    public void unfollow_user(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No username to unfollow was provided'}");
            return;
        }
        String[] argument = args[3].split(" ");
        if (argument[0].equals("-username")) {
            try {
                File file = new File("./src/main/java/TemaTest/followuser.csv");
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    String data = reader.nextLine();
                    String[] d = data.split(" ");
                    if (d[0].equals(argument[1])) {
                        File inputFile = new File("./src/main/java/TemaTest/followuser.csv");
                        File tempFile = new File("./src/main/java/TemaTest/followuser.csv");
                        BufferedReader reader1 = new BufferedReader(new FileReader(inputFile));
                        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

                        String currentLine;
                        while ((currentLine = reader1.readLine()) != null) {
                            String trimmedLine = currentLine.trim();
                            if (trimmedLine.equals(data)) continue;
                            writer.write(currentLine + System.getProperty("line.separator"));
                        }
                        writer.close();
                        reader1.close();
                        System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                        reader.close();
                        return;
                    }
                }
                System.out.print("{'status':'error','message':'The username to unfollow was not valid'}");
                reader.close();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
    }

    public void following_user(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
    }
    public void followers_user(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
    }

    public void most_followed_users(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);

        if (user == null) {
            return;
        }
    }

}

class comment {
    public comment() {}
    public void createcomment(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No text provided'}");
            return;
        } else if (args.length > 2) {
            String arg_text = args[4];
            if (arg_text.length() > 300) {
                System.out.print("{'status':'error','message':'Comment text length exceeded'}");
                return;
            }
            String[] text = arg_text.split(" ");
            int id = 1;
            if (text[0].equals("-text")) {
                try (FileWriter myWriter = new FileWriter("./src/main/java/TemaTest/comments.csv", true)) {
                    for (int i = 1; i < text.length; i++) {
                        myWriter.write(text[i] + " ");
                    }
                    myWriter.write(",");
                    myWriter.write((Integer.toString(id)));
                    myWriter.write("\n");
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            } else {
                System.out.print("{'status':'error','message':'No text provided'}");
                return;
            }
            System.out.print("{'status':'ok','message':'Comment added successfully'}");
        }
    }

    public void deletecomment(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No identifier was provided'}");
            return;
        }
        String[] arg3 = args[3].split(" ");
        if (arg3[0].equals("-id")) {
            try {
                File file = new File("./src/main/java/TemaTest/comments.csv");
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    String data = reader.nextLine();
                    String[] d = data.split(",");
                    String[] id = arg3[1].split("'");
                    if (d[1].equals(id[1])) {

                        File inputFile = new File("./src/main/java/TemaTest/comments.csv");
                        File tempFile = new File("./src/main/java/TemaTest/comments.csv");
                        BufferedReader reader1 = new BufferedReader(new FileReader(inputFile));
                        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

                        String currentLine;
                        while ((currentLine = reader1.readLine()) != null) {
                            String trimmedLine = currentLine.trim();
                            if (trimmedLine.equals(data)) continue;
                            writer.write(currentLine + System.getProperty("line.separator"));
                        }
                        writer.close();
                        reader1.close();
                        System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                        reader.close();
                        return;
                    }else {
                        System.out.print("{'status':'error','message':'The identifier was not valid'}");
                        reader.close();
                        return;
                    }
                }
                System.out.print("{'status':'error','message':'The identifier was not valid'}");
                reader.close();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
    }

    public void like_comment(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No comment identifier to like was provided'}");
            return;
        }else if (args.length > 2) {
            String[] argid = args[3].split(" ");
            int likes = 0;
            int ok=0;
            if (argid[0].equals("-comment-id")) {
                try {
                    File file = new File("./src/main/java/TemaTest/comments.csv");
                    Scanner reader = new Scanner(file);
                    while (reader.hasNextLine()) {
                        String data = reader.nextLine();
                        String[] d = data.split(",");
                        String[] id = argid[1].split("");
                        if (d[1].equals(id[1]) && ok==0) {
                            likes++;
                            ok = 1;
                            System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                            reader.close();
                            return;
                        } else {
                            System.out.print("{'status':'error','message':'The comment identifier to like was not valid'}");
                            reader.close();
                            return;
                        }
                    }
                    System.out.print("{'status':'error','message':'The comment identifier to like was not valid'}");
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }
        }
    }

    public void unlike_comment(String[] args) {
        user userpass = new user();
        user user = userpass.verif_login(args);
        if (user == null) {
            return;
        }
        if (args.length == 3) {
            System.out.print("{'status':'error','message':'No comment identifier to unlike was provided'}");
            return;
        }else if (args.length > 2) {
            String[] argid = args[3].split(" ");
            int likes = 0;
            if (argid[0].equals("-comment-id")) {
                try {
                    File file = new File("./src/main/java/TemaTest/posts.csv");
                    Scanner reader = new Scanner(file);
                    while (reader.hasNextLine()) {
                        String data = reader.nextLine();
                        String[] d = data.split(",");
                        String[] id = argid[1].split("");
                        if (d[1].equals(id[1])) {
                            likes--;
                            System.out.print("{'status':'ok','message':'Operation executed successfully'}");
                            reader.close();
                            return;
                        } else {
                            System.out.print("{'status':'error','message':'The comment identifier to unlike was not valid'}");
                            reader.close();
                            return;
                        }
                    }
                    System.out.print("{'status':'error','message':'The comment identifier to unlike was not valid'}");
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }
        }
    }
}



public class App {
    
public App() {/* compiled code */}

    public static void main(java.lang.String[] strings) {
        if (strings == null) {
            System.out.print("Hello world!");
        } else {
            if (strings[0].equals("-cleanup-all")) {
                try {
                    PrintWriter writer = new PrintWriter("./src/main/java/TemaTest/users.csv");
                    writer.print("");
                    writer.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                try {
                    PrintWriter writer = new PrintWriter("./src/main/java/TemaTest/posts.csv");
                    writer.print("");
                    writer.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                try {
                    PrintWriter writer = new PrintWriter("./src/main/java/TemaTest/followuser.csv");
                    writer.print("");
                    writer.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                try {
                    PrintWriter writer = new PrintWriter("./src/main/java/TemaTest/comments.csv");
                    writer.print("");
                    writer.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            } else if (strings[0].equals("-create-user")) {
                if (strings.length == 1) {
                    System.out.print("{'status':'error','message':'Please provide username'}");
                    return;
                } else if (strings.length == 2) {
                    System.out.print("{'status':'error','message':'Please provide password'}");
                    return;
                }
                String[] argument = strings[1].split(" ");
                String argument1 = argument[0];
                String username = argument[1];
                if (argument1.equals("-u")) {
                    try {
                        File file = new File("./src/main/java/TemaTest/users.csv");
                        Scanner reader = new Scanner(file);
                        while (reader.hasNextLine()) {
                            String data = reader.nextLine();
                            String[] d = data.split(",");
                            if (d[0].equals(argument[1])) {
                                System.out.print("{'status':'error','message':'User already exists'}");
                                reader.close();
                                return;
                            }
                        }
                        reader.close();
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                } else {
                    System.out.print("{'status':'error','message':'Please provide username'}");
                    return;
                }
                String[] argument2 = strings[2].split(" ");
                if (argument2[0].equals("-p")) {
                    String my_password = argument2[1];
                    System.out.print("{'status':'ok','message':'User created successfully'}");
                    try (
                            FileWriter myWriter = new FileWriter("./src/main/java/TemaTest/users.csv", true)
                    ) {
                        myWriter.write(username);
                        myWriter.write(",");
                        myWriter.write(my_password);
                        myWriter.write("\n");
                    } catch (IOException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
                } else {
                    System.out.print("{'status':'error','message':'Please provide password'}");
                }
            }  else if (strings[0].equals("-create-post")) {
                post p = new post();
                p.createpost(strings);
            } else if (strings[0].equals("-delete-post-by-id")) {
                post p = new post();
                p.deletepost(strings);
            } else if (strings[0].equals("-follow-user-by-username")) {
                follow f = new follow();
                f.follow_user(strings);
            } else if (strings[0].equals("-unfollow-user-by-username")) {
                follow f = new follow();
                f.unfollow_user(strings);
            }else if (strings[0].equals("-comment-post")) {
                comment c = new comment();
                c.createcomment(strings);
            }else if (strings[0].equals("-delete-comment-by-id")) {
                comment c = new comment();
                c.deletecomment(strings);
            }else if (strings[0].equals("-like-post")) {
                post p = new post();
                p.like_post(strings);
            } else if (strings[0].equals("-unlike-post")) {
                post p = new post();
                p.unlike_post(strings);
            } else if (strings[0].equals("-like-comment")) {
                comment c = new comment();
                c.like_comment(strings);
            } else if (strings[0].equals("-unlike-comment")) {
                comment c = new comment();
                c.unlike_comment(strings);
            } else if (strings[0].equals("-get-followings-posts")) {
                post p = new post();
                p.lista_postari_follow(strings);
            } else if (strings[0].equals("-get-user-posts")) {
                post p = new post();
                p.lista_postari_user(strings);
            } else if (strings[0].equals("-get-post-details")) {
                post p = new post();
                p.details_post(strings);
            } else if (strings[0].equals("-get-followers")) {
                follow f = new follow();
                f.followers_user(strings);
            } else if (strings[0].equals("-get-following")) {
                follow f = new follow();
                f.following_user(strings);
            } else if (strings[0].equals("–get-most-followed-users")) {
                follow f = new follow();
                f.most_followed_users(strings);
            } else if (strings[0].equals("-get-most-liked-posts")) {
                post p = new post();
                p.most_liked_posts(strings);
            } else if (strings[0].equals("-get-most-commented-posts")) {
                post p = new post();
                p.most_commented_posts(strings);
            } else if (strings[0].equals("-get-most-liked-users")) {
                user u = new user();
                u.most_liked_users(strings);
            }
        }
    }
}